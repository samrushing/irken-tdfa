;; -*- Mode: Irken -*-

(include "charset.scm")

(printn (charset-repr (parse-charset "A-Z")))
(printn (charset-repr (parse-charset "A-Za-za-f")))
(printn (charset-repr (parse-charset "abcmno")))
(printn (charset-repr (parse-charset "acegi")))
(printn (charset-repr (charset/invert (charset/invert (parse-charset "A-Z")))))
(printn (charset-repr (charset/invert (parse-charset "A-Z"))))
(printn (charset-repr (charset/invert (charset/range 0 256))))
(printn (charset-repr (charset/invert (charset/range 0 65))))
(printn (charset-repr (charset/invert (charset/range 65 256))))
(printn (charset-repr (parse-charset "a-bm-o")))
(assert (eq? #f (charset/overlap? (parse-charset "cd") (parse-charset "ab"))))
(assert (eq? #f (charset/overlap? (parse-charset "a") (parse-charset "b"))))
(assert (eq? #t (charset/overlap? (parse-charset "ab") (parse-charset "b"))))
(assert (eq? #t (charset/overlap? (parse-charset "b") (parse-charset "bc"))))
(assert (eq? #f (charset/overlap? (parse-charset "c") (parse-charset "b"))))
(assert (eq? #f (charset/overlap? (parse-charset "A-M") (parse-charset "N-Z"))))
(assert (eq? #t (charset/overlap? (parse-charset "A-S") (parse-charset "G-Z"))))
(assert (eq? #t (charset/overlap? (parse-charset "a-bm-o") (parse-charset "n"))))
(assert (eq? #t (charset/overlap? (parse-charset "a-bm-o") (parse-charset "n"))))
(assert (= 1 (charset/size (parse-charset "a"))))
(assert (= 255 (charset/size (charset/invert (parse-charset "a")))))
(assert (= 52 (charset/size (parse-charset "a-zA-Z"))))
(assert (= (- 256 52) (charset/size (charset/invert (parse-charset "a-zA-Z")))))
(assert (eq? #t (charset/in (parse-charset "a-zA-Z") #\m)))
(assert (eq? #t (charset/in (parse-charset "a-zA-Z") #\Z)))
(assert (eq? #f (charset/in (parse-charset "a-zA-Z") #\space)))
(assert (eq? #t (charset/in (parse-charset "a-zA-Z") #\M)))
(assert (eq? #f (charset/in (parse-charset "a-zA-Z") #\9)))
(let ((sym0 (charset/empty))
      (sym1 (parse-charset "a"))
      (sym2 (charset/invert sym1)))
  (assert (string=? "[a]" (charset-repr (charset/merge sym0 sym1))))
  (assert (string=? "." (charset-repr (charset/merge sym1 sym2))))
  (assert (string=? "." (charset-repr (charset/merge (charset/merge sym0 sym1) sym2))))
  (assert (string=? "." (charset-repr (charset/merge charset/dot sym2))))
  (printf (charset-repr charset/dot) "\n")
  (printf (charset-repr (charset/merge charset/dot sym2)) "\n")
  (define (merge2 s0 s1)
    (let ((r (charset/merge s0 s1)))
      (printf "merge " (charset-repr-raw s0) " " (charset-repr-raw s1) " -> " (charset-repr-raw r) "\n")
      r))
  (merge2 sym2 sym1)
  )
  
